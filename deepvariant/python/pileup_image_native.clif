# Copyright 2017 Google LLC.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from "third_party/nucleus/protos/reads_pyclif.h" import *
from "third_party/nucleus/util/proto_clif_converter.h" import *
from "deepvariant/protos/deepvariant_pyclif.h" import *
from "deepvariant/python/clif_converters.h" import *

from "deepvariant/pileup_image_native.h":
  namespace `learning::genomics::deepvariant`:
    class PileupImageEncoderNative:

      def __init__(self, options: PileupImageOptions)

      def `AllChannelsEnum` as all_channels_enum(
          self, alt_aligned_pileup: str) -> list<DeepVariantChannelEnum>

      def `BuildPileupForOneSamplePython` as build_pileup_for_one_sample(
          self,
          dv_call: ConstProtoPtr<DeepVariantCall>,
          ref_bases: str,
          reads: list<ConstProtoPtr<Read>>,
          image_start_pos: int,
          alt_alleles: list<str>,
          sample_options: SampleOptions) -> list<ImageRow>

      def `EncodeReadPython` as encode_read(
          self,
          dv_call: ConstProtoPtr<DeepVariantCall>,
          ref_bases: str,
          read: ConstProtoPtr<Read>,
          image_start_pos: int,
          alt_alleles: list<str>) -> ImageRow

      def `EncodeReference` as encode_reference(
          self, ref_bases: str) -> ImageRow

      def `BaseColor` as base_color(self, base: str) -> int

      def `StrandColor` as strand_color(
          self, on_positive_strand: bool) -> int

      def `SupportsAltColor` as supports_alt_color(
          self, read_supports_alt: int) -> int

      def `MatchesRefColor` as matches_ref_color(
          self, base_matches_ref: bool) -> int

      def `BaseQualityColor` as base_quality_color(
          self, base_qual: int) -> int

      def `MappingQualityColor` as mapping_quality_color(
          self, mapping_qual: int) -> int

      def `AlleleFrequencyColor` as allele_frequency_color(
          self, allele_frequency: float) -> int
