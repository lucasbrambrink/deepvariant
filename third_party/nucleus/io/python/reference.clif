# Copyright 2018 Google LLC.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from "third_party/nucleus/protos/fasta_pyclif.h" import *
from "third_party/nucleus/protos/range_pyclif.h" import *
from "third_party/nucleus/protos/reference_pyclif.h" import *
from "third_party/nucleus/core/statusor_clif_converters.h" import *

from third_party.nucleus.io.clif_postproc import WrappedReferenceIterable

from "third_party/nucleus/io/reference.h":
  namespace `nucleus`:
    class GenomeReferenceRecordIterable:
      def Next(self) -> (not_done: StatusOr<bool>, fasta: tuple<str, str>)
      def Release(self) -> Status
      @__enter__
      def PythonEnter(self) -> Status
      @__exit__
      def PythonExit(self) -> Status

    class GenomeReference:
      contig_names: list<str> = property(`ContigNames`)
      def `Contig` as contig(self, chrom: str) -> StatusOr<ContigInfo>
      def `GetBases` as bases(self, region: Range) -> StatusOr<str>
      def `Iterate` as iterate(self) -> StatusOr<GenomeReferenceRecordIterable>:
        return WrappedReferenceIterable(...)
      def `HasContig` as has_contig(self, contig_name: str) -> bool
      def `IsValidInterval` as is_valid_interval(self, region: Range) -> bool

      # These are pure virtual superclass methods but including these above
      # results in a linker error.
      contigs: list<ContigInfo> = property(`Contigs`)

      @__enter__
      def PythonEnter(self) -> Status
      @__exit__
      def Close(self) -> Status

    class IndexedFastaReader(GenomeReference):
      @classmethod
      def `FromFile` as from_file(cls,
                                  fasta_path: str,
                                  fai_path: str,
                                  options: FastaReaderOptions,
                                  cache_size_bases: int = default)
        -> StatusOr<IndexedFastaReader>

    class UnindexedFastaReader(GenomeReference):
      @classmethod
      def `FromFile` as from_file(cls,
                                  fasta_path: str)
        -> StatusOr<UnindexedFastaReader>

    class InMemoryFastaReader(GenomeReference):
      @classmethod
      def `Create` as create(cls, contigs: list<ContigInfo>, seqs: list<ReferenceSequence>)
        -> StatusOr<InMemoryFastaReader>

      reference_sequences: dict<str, ReferenceSequence> = property(`ReferenceSequences`)
